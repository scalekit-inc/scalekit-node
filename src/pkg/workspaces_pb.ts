// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file workspaces.proto (package scalekit.v1.workspaces, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { RegionCode } from "./commons_pb.js";

/**
 * @generated from enum scalekit.v1.workspaces.YesNo
 */
export enum YesNo {
  /**
   * @generated from enum value: YES = 0;
   */
  YES = 0,

  /**
   * @generated from enum value: NO = 1;
   */
  NO = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(YesNo)
proto3.util.setEnumType(YesNo, "scalekit.v1.workspaces.YesNo", [
  { no: 0, name: "YES" },
  { no: 1, name: "NO" },
]);

/**
 * @generated from message scalekit.v1.workspaces.Workspace
 */
export class Workspace extends Message<Workspace> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * @generated from field: scalekit.v1.commons.RegionCode region_code = 6;
   */
  regionCode = RegionCode.REGION_CODE_UNSPECIFIED;

  constructor(data?: PartialMessage<Workspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.workspaces.Workspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create_time", kind: "message", T: Timestamp },
    { no: 3, name: "update_time", kind: "message", T: Timestamp },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "region_code", kind: "enum", T: proto3.getEnumType(RegionCode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workspace {
    return new Workspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJsonString(jsonString, options);
  }

  static equals(a: Workspace | PlainMessage<Workspace> | undefined, b: Workspace | PlainMessage<Workspace> | undefined): boolean {
    return proto3.util.equals(Workspace, a, b);
  }
}

/**
 * @generated from message scalekit.v1.workspaces.CreateWorkspace
 */
export class CreateWorkspace extends Message<CreateWorkspace> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: optional string company = 2;
   */
  company?: string;

  /**
   * @generated from field: optional scalekit.v1.workspaces.YesNo send_welcome_email = 3;
   */
  sendWelcomeEmail?: YesNo;

  constructor(data?: PartialMessage<CreateWorkspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.workspaces.CreateWorkspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "company", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "send_welcome_email", kind: "enum", T: proto3.getEnumType(YesNo), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkspace {
    return new CreateWorkspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkspace {
    return new CreateWorkspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkspace {
    return new CreateWorkspace().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkspace | PlainMessage<CreateWorkspace> | undefined, b: CreateWorkspace | PlainMessage<CreateWorkspace> | undefined): boolean {
    return proto3.util.equals(CreateWorkspace, a, b);
  }
}

/**
 * @generated from message scalekit.v1.workspaces.UpdateWorkspace
 */
export class UpdateWorkspace extends Message<UpdateWorkspace> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  constructor(data?: PartialMessage<UpdateWorkspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.workspaces.UpdateWorkspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspace {
    return new UpdateWorkspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspace {
    return new UpdateWorkspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspace {
    return new UpdateWorkspace().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspace | PlainMessage<UpdateWorkspace> | undefined, b: UpdateWorkspace | PlainMessage<UpdateWorkspace> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspace, a, b);
  }
}

/**
 * @generated from message scalekit.v1.workspaces.CreateWorkspaceRequest
 */
export class CreateWorkspaceRequest extends Message<CreateWorkspaceRequest> {
  /**
   * @generated from field: scalekit.v1.workspaces.CreateWorkspace workspace = 1;
   */
  workspace?: CreateWorkspace;

  constructor(data?: PartialMessage<CreateWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.workspaces.CreateWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: CreateWorkspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkspaceRequest {
    return new CreateWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkspaceRequest {
    return new CreateWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkspaceRequest {
    return new CreateWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkspaceRequest | PlainMessage<CreateWorkspaceRequest> | undefined, b: CreateWorkspaceRequest | PlainMessage<CreateWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(CreateWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.workspaces.CreateWorkspaceResponse
 */
export class CreateWorkspaceResponse extends Message<CreateWorkspaceResponse> {
  /**
   * @generated from field: scalekit.v1.workspaces.Workspace workspace = 1;
   */
  workspace?: Workspace;

  /**
   * @generated from field: string link = 2;
   */
  link = "";

  constructor(data?: PartialMessage<CreateWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.workspaces.CreateWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Workspace },
    { no: 2, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkspaceResponse {
    return new CreateWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkspaceResponse {
    return new CreateWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkspaceResponse {
    return new CreateWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkspaceResponse | PlainMessage<CreateWorkspaceResponse> | undefined, b: CreateWorkspaceResponse | PlainMessage<CreateWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(CreateWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message scalekit.v1.workspaces.UpdateWorkspaceRequest
 */
export class UpdateWorkspaceRequest extends Message<UpdateWorkspaceRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: scalekit.v1.workspaces.UpdateWorkspace workspace = 2;
   */
  workspace?: UpdateWorkspace;

  constructor(data?: PartialMessage<UpdateWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.workspaces.UpdateWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace", kind: "message", T: UpdateWorkspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspaceRequest {
    return new UpdateWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest {
    return new UpdateWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest {
    return new UpdateWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspaceRequest | PlainMessage<UpdateWorkspaceRequest> | undefined, b: UpdateWorkspaceRequest | PlainMessage<UpdateWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.workspaces.UpdateCurrentWorkspaceRequest
 */
export class UpdateCurrentWorkspaceRequest extends Message<UpdateCurrentWorkspaceRequest> {
  /**
   * @generated from field: scalekit.v1.workspaces.UpdateWorkspace workspace = 1;
   */
  workspace?: UpdateWorkspace;

  constructor(data?: PartialMessage<UpdateCurrentWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.workspaces.UpdateCurrentWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: UpdateWorkspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCurrentWorkspaceRequest {
    return new UpdateCurrentWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCurrentWorkspaceRequest {
    return new UpdateCurrentWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCurrentWorkspaceRequest {
    return new UpdateCurrentWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCurrentWorkspaceRequest | PlainMessage<UpdateCurrentWorkspaceRequest> | undefined, b: UpdateCurrentWorkspaceRequest | PlainMessage<UpdateCurrentWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCurrentWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.workspaces.UpdateWorkspaceResponse
 */
export class UpdateWorkspaceResponse extends Message<UpdateWorkspaceResponse> {
  /**
   * @generated from field: scalekit.v1.workspaces.Workspace workspace = 1;
   */
  workspace?: Workspace;

  constructor(data?: PartialMessage<UpdateWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.workspaces.UpdateWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspaceResponse {
    return new UpdateWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspaceResponse {
    return new UpdateWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspaceResponse {
    return new UpdateWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspaceResponse | PlainMessage<UpdateWorkspaceResponse> | undefined, b: UpdateWorkspaceResponse | PlainMessage<UpdateWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message scalekit.v1.workspaces.GetWorkspaceRequest
 */
export class GetWorkspaceRequest extends Message<GetWorkspaceRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.workspaces.GetWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined, b: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.workspaces.GetCurrentWorkspaceRequest
 */
export class GetCurrentWorkspaceRequest extends Message<GetCurrentWorkspaceRequest> {
  constructor(data?: PartialMessage<GetCurrentWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.workspaces.GetCurrentWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentWorkspaceRequest {
    return new GetCurrentWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentWorkspaceRequest {
    return new GetCurrentWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentWorkspaceRequest {
    return new GetCurrentWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentWorkspaceRequest | PlainMessage<GetCurrentWorkspaceRequest> | undefined, b: GetCurrentWorkspaceRequest | PlainMessage<GetCurrentWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(GetCurrentWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.workspaces.GetWorkspaceResponse
 */
export class GetWorkspaceResponse extends Message<GetWorkspaceResponse> {
  /**
   * @generated from field: scalekit.v1.workspaces.Workspace workspace = 1;
   */
  workspace?: Workspace;

  constructor(data?: PartialMessage<GetWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.workspaces.GetWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined, b: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceResponse, a, b);
  }
}

